diff -u pprint_old/pprint.ml pprint/pprint.ml
--- pprint_old/pprint.ml	2010-03-11 18:14:10.000000000 +0100
+++ pprint/pprint.ml	2010-04-17 07:29:42.000000000 +0200
@@ -80,6 +80,14 @@
 
   | String of string * int * int
 
+    (* [FancyString (s, ofs, len, column_len)] is a string containing
+       fancy characters (color escape characters, UTF-8 or multibyte
+       chars...) : the visible column len is different from the hard
+       String.length. We assume, but do not check, that fancystrings do
+       not contain a newline character. *)
+
+  | FancyString of string * int * int * int
+
     (* [Blank n] is a document that consists of [n] blank characters. *)
 
   | Blank of int
@@ -335,7 +343,9 @@
     (* The first piece of input is a string. Emit it and continue. *)
 
     | String (s, ofs, len), _ ->
-	emit_string stack state s ofs len
+	emit_string stack state s ofs len len
+    | FancyString (s, ofs, len, column_len), _ ->
+	emit_string stack state s ofs len column_len
     | Blank n, _ ->
 	emit_blanks stack state n
 
@@ -490,14 +500,14 @@
      output buffer), updates the current column, discards the first piece of
      input, and continues. *)
 
-  and emit_string stack state s ofs len =
+  and emit_string stack state s ofs len column_len =
     begin match stack with
     | [] ->
 	Output.substring state.channel s ofs len
     | _ ->
 	state.output <- OString (s, ofs, len, state.output)
     end;
-    state.column <- state.column + len;
+    state.column <- state.column + column_len;
     shift stack state
 
   (* [emit_blanks] prints a blank string (either to the output channel or to
@@ -549,6 +559,9 @@
       | String (s, ofs, len) ->
 	  Output.substring channel s ofs len;
 	  column := !column + len
+      | FancyString (s, ofs, len, column_len) ->
+	  Output.substring channel s ofs len;
+	  column := !column + column_len
       | Blank n ->
 	  blanks channel n;
 	  column := !column + n
@@ -616,6 +629,12 @@
   else
     String (s, ofs, len)
 
+let fancysubstring s ofs len column_len =
+  match substring s ofs len with
+    | String (s, ofs, len) ->
+        FancyString (s, ofs, len, column_len)
+    | other -> other
+
 let text s =
   substring s 0 (String.length s)
 
@@ -707,6 +726,14 @@
   in
   chop 0
 
+(* We do not check for '\n', as we try not to make assumptions
+   regarding fancystring contents : it may contain a multibyte character
+   containing a '\n' part. *)
+let fancystring s column_len =
+  fancysubstring s 0 (String.length s) column_len
+
+let fancy measure = fun s -> fancystring s (measure s)
+
 let group_break1 = group break1
 
 let words s =
diff -u pprint_old/pprint.mli pprint/pprint.mli
--- pprint_old/pprint.mli	2010-03-11 18:14:10.000000000 +0100
+++ pprint/pprint.mli	2010-04-17 07:26:40.000000000 +0200
@@ -21,6 +21,7 @@
 val hardline: document
 val char: char -> document
 val substring: string -> int -> int -> document
+val fancysubstring : string -> int -> int -> int -> document
 val text: string -> document
 val blank: int -> document
 val (^^): document -> document -> document
@@ -53,6 +54,8 @@
 val break1: document
 
 val string: string -> document
+val fancystring: string -> int -> document
+val fancy: (string -> int) -> string -> document
 val words: string -> document
 
 val lparen: document
